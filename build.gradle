plugins {
    id("groovy") 
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "2.0.6"
}

group = "the.primer"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("the.primer.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-validation")
    runtimeOnly("ch.qos.logback:logback-classic")
    implementation("io.micronaut:micronaut-validation")
    implementation 'io.micronaut.security:micronaut-security'
    implementation 'software.amazon.awssdk:aws-sdk-java:2.20.46'
    implementation('com.google.code.gson:gson:2.10.1')
    implementation('com.google.zxing:core:3.5.1')
    implementation('com.google.zxing:javase:3.5.1')
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation('org.codehaus.groovy:groovy-json:3.0.16')
    implementation("commons-codec:commons-codec:1.15")
    testImplementation('org.gebish:geb-spock:7.0')
    testImplementation('org.seleniumhq.selenium:htmlunit-driver:4.8.0')
    testImplementation('org.seleniumhq.selenium:selenium-chrome-driver:4.8.1')
    testImplementation('org.seleniumhq.selenium:selenium-safari-driver:4.8.1')
    testImplementation('org.seleniumhq.selenium:selenium-firefox-driver:4.8.1')
}

application {
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "the.primer.Application"
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

test {
    testLogging {
        showStandardStreams = true
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

task generateSources {
    def outputDir = file("$buildDir/generated-src")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "the/primer/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write(""" package the.primer; public class Version { public static String getVersion() { return "${project.version}"; }}""")
    }
}

compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java

dockerBuild {
    images = ["public.ecr.aws/vivasa/the-primer:latest"]
}

